# -*- coding: utf-8 -*-
"""Loan_Eligibility_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xR-N0GT5n62pef9DXJq4H7SJHWeg4TBx
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

df=pd.read_csv("Loan_Data.csv")

df.head()

df.shape

df.info()

df.describe()

pd.crosstab(df['Credit_History'],df['Loan_Status'], margins=True) #margin is used to get total column in last

df.isnull().sum()

df.boxplot(column='ApplicantIncome') #to find outlier

df['ApplicantIncome'].hist(edgecolor='black',bins=20)

df['CoapplicantIncome'].hist(color='orange',edgecolor='black',bins=20)

df.boxplot(column='ApplicantIncome', by='Education')

plt.bar(df['Education'],df['ApplicantIncome'])

df.boxplot(column='LoanAmount')

df['LoanAmount'].hist(bins=20)

df['LoanAmount_log']=np.log(df['LoanAmount'])
df['LoanAmount_log'].hist(bins=20)

df.isnull().sum()

df['Gender'].fillna(df['Gender'].mode()[0],inplace=True) #gender is cataborical variable for that we use mode to replcae values

df['Married'].fillna(df['Married'].mode()[0],inplace=True)#same

df['Dependents'].fillna(df['Dependents'].mode()[0],inplace=True)

df['Dependents'].fillna(df['Dependents'].mode()[0],inplace=True)

df['Self_Employed'].fillna(df['Self_Employed'].mode()[0],inplace=True)

df.LoanAmount=df.LoanAmount.fillna(df.LoanAmount.mean())
df.LoanAmount_log=df.LoanAmount_log.fillna(df.LoanAmount_log.mean())

df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mode()[0],inplace=True)

df['Credit_History'].fillna(df['Credit_History'].mode()[0],inplace=True)

df.LoanAmount_log=df.LoanAmount_log.fillna(df.LoanAmount_log.mean())

df.isnull().sum() # we didnt give index in mode [0]

df.isnull().sum()

df['TotalIncome']=df['ApplicantIncome'] + df['CoapplicantIncome']
df['TotalIncome_log']=np.log(df['TotalIncome'])

df['TotalIncome_log'].hist(bins=20)

df.head(2)

X=df.iloc[:,np.r_[1:5,9:11,13:15]].values
y=df.iloc[:,12].values

x

y

## b=df.iloc[:,[1,2,3,4,9,10,13,14]]

#split Dataset
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0) #randon_state=0 it will make our ddata same evry time we run the code

print(X_train) #

# We use lable encododer to convert catogorical text into numberical format
from sklearn.preprocessing import LabelEncoder
labelencoder_x=LabelEncoder()

for i in range(0,5):
    X_train[:,i]=labelencoder_x.fit_transform(X_train[:,i])

X_train[:,7]=labelencoder_x.fit_transform(X_train[:,7])

X_train

labelencoder_y=LabelEncoder()
y_train=labelencoder_y.fit_transform(y_train)
y_train

for i in range(0,5):
    X_test[:,i]=labelencoder_x.fit_transform(X_test[:,i])

X_test[:,7]=labelencoder_x.fit_transform(X_test[:,7])
X_test

labelencoder_y=LabelEncoder()
y_test=labelencoder_y.fit_transform(y_test)
y_test

#skill our dat
from sklearn.preprocessing import StandardScaler
ss=StandardScaler()
X_train=ss.fit_transform(X_train)
X_test=ss.fit_transform(X_test)

#apply algorthm
#decision tree
from sklearn.tree import DecisionTreeClassifier
DTREE=DecisionTreeClassifier(criterion='entropy',random_state=0)
DTREE.fit(X_train,y_train)

y_pred=DTREE.predict(X_test)
y_pred

from sklearn import metrics
print('The accurancy of decision tree is: ',metrics.accuracy_score(y_pred,y_test))

#other algorithm
from sklearn.naive_bayes import GaussianNB
NBClassifer=GaussianNB()
NBClassifer.fit(X_train,y_train)

y_pred=NBClassifer.predict(X_test)
y_pred

print('The accurancy of Naive Bayes is: ',metrics.accuracy_score(y_pred,y_test))

testdata=pd.read_csv('loan-test.csv')
testdata.head()

testdata.info()

testdata.isnull().sum()

testdata['Gender'].fillna(testdata['Gender'].mode()[0],inplace=True)
testdata['Dependents'].fillna(testdata['Dependents'].mode()[0],inplace=True)
testdata['Self_Employed'].fillna(testdata['Self_Employed'].mode()[0],inplace=True)
testdata['Loan_Amount_Term'].fillna(testdata['Loan_Amount_Term'].mode()[0],inplace=True)
testdata['Credit_History'].fillna(testdata['Credit_History'].mode()[0],inplace=True)

testdata.boxplot(column='LoanAmount')

testdata.LoanAmount=testdata.LoanAmount.fillna(testdata.LoanAmount.mean())

testdata['LoanAmount_log']=np.log(testdata['LoanAmount'])

testdata.isnull().sum()

testdata['TotalIncome']=testdata['ApplicantIncome'] + testdata['CoapplicantIncome']
testdata['TotalIncome_log']=np.log(testdata['TotalIncome'])

testdata.head()

test= testdata.iloc[:,np.r_[1:5,9:11,13:15]].values

for i in range(0,5):
    test[:,i]=labelencoder_x.fit_transform(test[:,i])

test[:,7]=labelencoder_x.fit_transform(test[:,7])

test

test=ss.fit_transform(test)

pred=NBClassifer.predict(test)
pred